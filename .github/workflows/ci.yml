name: CI
# Hotfix: validate YAML structure and remove accidental separators (2025-09-19)

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]
  release:
    types: [ published ]
  workflow_dispatch:
    inputs:
      debug_coverage:
        description: 'Enable detailed coverage debugging'
        required: false
        default: true
        type: boolean

jobs:
  test:
    runs-on: ${{ matrix.os }}
    env:
      CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.11"]

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        # Ensure we have access to compare commits for coverage
        ref: ${{ github.head_ref || github.ref }}

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true

    - name: Install dependencies
      run: |
        uv sync --dev

    - name: Lint with ruff
      run: |
        uv run ruff check . || true

    - name: Format check with black
      run: |
        uv run black --check . || true

    - name: Type check with mypy
      run: |
        uv run mypy . --ignore-missing-imports || true

    - name: Security check with bandit
      run: |
        uv run bandit -r . -f json -o bandit-report.json || true

    - name: Run tests with coverage
      run: |
        uv run pytest --cov=claude_builder --cov-report=xml:coverage.xml --cov-report=html:htmlcov --cov-report=term-missing --junitxml=junit.xml -v

    - name: Ensure coverage.xml exists
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      run: |
        if [ ! -f coverage.xml ]; then
          echo "coverage.xml missing, attempting to generate from .coverage"
          uv run coverage xml -o coverage.xml || true
        fi
        ls -la coverage.xml || echo "coverage.xml not found after generation attempt"

    - name: Normalize coverage paths for Codacy (if needed)
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      run: |
        if grep -q "src/claude_builder" coverage.xml; then
          uv run python scripts/fix_coverage_paths.py coverage.xml || true
          echo "Applied coverage path normalization for Codacy"
        else
          echo "No path normalization needed"
        fi

    - name: Debug coverage file
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      run: |
        ls -la coverage.xml || echo "coverage.xml not found"
        cat coverage.xml | head -20 || echo "Cannot read coverage.xml"

    - name: Display coverage summary
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      run: |
        echo "## Coverage Summary" >> $GITHUB_STEP_SUMMARY
        uv run coverage report >> $GITHUB_STEP_SUMMARY || echo "Coverage report not available" >> $GITHUB_STEP_SUMMARY

    - name: Compute coverage percent
      id: cov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      run: |
        if [ -f coverage.xml ]; then
          RATE=$(grep -o 'line-rate="[^"]*"' coverage.xml | head -1 | sed 's/[^0-9\.]//g' || true)
          if [ -z "$RATE" ]; then PCT=0; else PCT=$(awk -v r="$RATE" 'BEGIN{printf "%.2f", r*100}'); fi
        else
          PCT=0
        fi
        echo "percent=$PCT" >> "$GITHUB_OUTPUT"

    - name: Debug coverage file location
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      run: |
        pwd
        ls -la coverage.xml || echo "coverage.xml not found in current directory"
        find . -name "coverage.xml" -type f 2>/dev/null || echo "coverage.xml not found anywhere"

    - name: Upload coverage to Codacy
      id: codacy
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11' && hashFiles('coverage.xml') != ''
      uses: codacy/codacy-coverage-reporter-action@v1
      with:
        project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
        coverage-reports: coverage.xml
        force-coverage-parser: cobertura
      env:
        CODACY_API_BASE_URL: https://api.codacy.com

    - name: Debug git refs for Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      env:
        GITHUB_REF_NAME: ${{ github.ref_name }}
        GITHUB_EVENT_BEFORE: ${{ github.event.before }}
        GITHUB_BASE_REF: ${{ github.base_ref }}
        GITHUB_HEAD_REF: ${{ github.head_ref }}
      run: |
        echo "Current commit: $(git rev-parse HEAD)"
        echo "Branch: $GITHUB_REF_NAME"
        echo "Event before: $GITHUB_EVENT_BEFORE"
        echo "Base ref: $GITHUB_BASE_REF"
        echo "Head ref: $GITHUB_HEAD_REF"
        git log --oneline -5

    - name: Upload coverage to Codecov
      id: codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        verbose: true
        token: ${{ secrets.CODECOV_TOKEN }}
        slug: ${{ github.repository }}

    - name: Upload test results to Codecov
      id: codecov-test-results
      if: ${{ !cancelled() && matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11' }}
      uses: codecov/test-results-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./junit.xml
        flags: unittests

    - name: Append coverage status to summary
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      run: |
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Coverage percent: ${{ steps.cov.outputs.percent }}%" >> $GITHUB_STEP_SUMMARY
        echo "Codacy upload:  ${{ steps.codacy.outcome }}" >> $GITHUB_STEP_SUMMARY
        echo "Codecov upload: ${{ steps.codecov.outcome }}" >> $GITHUB_STEP_SUMMARY
        echo "Test results:   ${{ steps.codecov-test-results.outcome }}" >> $GITHUB_STEP_SUMMARY

    - name: Upload test results and coverage artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          junit.xml
          coverage.xml
          htmlcov/
          bandit-report.json
        if-no-files-found: ignore

  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true

    - name: Install dependencies
      run: |
        uv sync --dev

    - name: Check Codacy token availability
      run: |
        if [ -z "${{ secrets.CODACY_PROJECT_TOKEN }}" ]; then
          echo "⚠️  CODACY_PROJECT_TOKEN is not set - Codacy analysis will be skipped"
        else
          echo "✅ CODACY_PROJECT_TOKEN is configured"
        fi

    - name: Codacy Analysis (ruff)
      continue-on-error: true
      uses: codacy/codacy-analysis-cli-action@v4
      with:
        project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
        upload: true
        max-allowed-issues: 2147483647
        tool: "ruff"
        directory: "${{ github.workspace }}/src"

    - name: Codacy Analysis (pylint)
      continue-on-error: true
      uses: codacy/codacy-analysis-cli-action@v4
      with:
        project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
        upload: true
        max-allowed-issues: 2147483647
        tool: "pylint"
        directory: "${{ github.workspace }}/src"

    - name: Codacy Analysis (bandit)
      continue-on-error: true
      uses: codacy/codacy-analysis-cli-action@v4
      with:
        project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
        upload: true
        max-allowed-issues: 2147483647
        tool: "bandit"
        directory: "${{ github.workspace }}/src"

    - name: Codacy Analysis (semgrep)
      continue-on-error: true
      uses: codacy/codacy-analysis-cli-action@v4
      with:
        project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
        upload: true
        max-allowed-issues: 2147483647
        tool: "semgrep"
        directory: "${{ github.workspace }}/src"

    - name: Lint markdown files
      uses: DavidAnson/markdownlint-cli2-action@v16
      with:
        globs: |
          **/*.md
          !.venv/**
          !node_modules/**

  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
      - name: Install security tooling
        run: |
          uv pip install --system detect-secrets bandit
      - name: Verify secrets baseline
        run: detect-secrets scan --baseline .secrets.baseline --all-files --exclude-files 'src/claude_builder/templates/*'
      - name: Bandit (security scan)
        run: |
          bandit -r src/claude_builder -f json -o bandit-report.json || true
      - name: Upload security artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-artifacts
          path: |
            bandit-report.json
          if-no-files-found: ignore

  performance:
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
      - name: Install project (dev)
        run: |
          uv sync --dev
      - name: Run performance smoke tests (if present)
        env:
          PYTHONPATH: src
        run: |
          if [ -d tests/performance ]; then
            uv run pytest tests/performance -q || true
          else
            echo "No tests/performance directory; skipping."
          fi

  integration-tests:
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
      - name: Install project (dev)
        run: |
          uv sync --dev
      - name: Run integration tests
        env:
          PYTHONPATH: src
        run: |
          if [ -d tests/integration ]; then
            uv run pytest tests/integration -q -m "not performance and not slow and not requires_network and not requires_git"
          else
            echo "No integration tests found; skipping."
          fi

  build:
    runs-on: ubuntu-latest
    needs: [test, integration-tests]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
      - name: Build sdist and wheel
        run: |
          uv run python -m build
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-artifacts
          path: dist/*
          if-no-files-found: error

  notify:
    runs-on: ubuntu-latest
    needs: [test, code-quality, security, performance, integration-tests, build]
    if: always()
    steps:
      - name: Summary
        run: |
          echo "CI completed. Check artifacts and job results above." >> $GITHUB_STEP_SUMMARY
