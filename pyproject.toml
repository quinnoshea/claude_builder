[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "claude-builder"
version = "0.1.0"
description = "Universal Claude Code Environment Generator"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Claude Builder Team"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Tools",
    "Topic :: Software Development :: Documentation",
]
keywords = ["claude", "ai", "development", "automation", "documentation"]
requires-python = ">=3.8"
dependencies = [
    "click>=8.0.0",
    "pydantic>=2.0.0",
    "rich>=13.0.0",
    "toml>=0.10.0",
    "pyyaml>=6.0.0",
    "pathspec>=0.11.0",
    "gitpython>=3.1.0",
    "requests>=2.28.0",
    "aiohttp>=3.8.0",
    "aiofiles>=23.0.0",
    "psutil>=5.9.0",
    "cryptography>=3.4.0",
    "keyring>=23.0.0",
    "jinja2>=3.1.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-benchmark>=4.0.0",
    "pytest-xdist>=3.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "types-PyYAML>=6.0.0",
    "types-toml>=0.10.0",
    "pre-commit>=3.0.0",
    "bandit>=1.7.0",
    "safety>=2.0.0",
    "semgrep>=1.0.0",
    "isort>=5.0.0",
    "coverage[toml]>=7.0.0",
    "radon>=6.0.1",
    "interrogate>=1.7.0",
    "detect-secrets>=1.5.0",
    "build>=0.10.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-benchmark>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-asyncio>=0.21.0",
]

[project.urls]
Homepage = "https://github.com/quinnoshea/claude_builder"
Repository = "https://github.com/quinnoshea/claude_builder"
Documentation = "https://github.com/quinnoshea/claude_builder#readme"
Issues = "https://github.com/quinnoshea/claude_builder/issues"

[project.scripts]
claude-builder = "claude_builder.cli.main:main"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]
include = ["claude_builder*"]

[tool.setuptools.package-data]
claude_builder = [
    "templates/**/*",
    "agents/**/*",
    "config/**/*",
]

[tool.ruff]
line-length = 88
target-version = "py38"
src = ["src"]

[tool.ruff.lint]
select = ["E", "F", "W", "C90", "I", "N", "UP", "YTT", "S", "BLE", "FBT", "B", "A", "COM", "C4", "DTZ", "T10", "EM", "EXE", "ISC", "ICN", "G", "INP", "PIE", "T20", "PYI", "PT", "Q", "RSE", "RET", "SLF", "SIM", "TID", "TCH", "ARG", "PTH", "ERA", "PD", "PGH", "PL", "TRY", "NPY", "RUF"]
ignore = ["E501", "COM812", "ISC001"]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "PLR2004", "PLR0913"]
"src/claude_builder/templates/*" = ["T201", "T203"]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''
force-exclude = '''
/(
  src/claude_builder/templates
)/
'''

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = ["requests.*", "urllib3.*"]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config --cov=claude_builder --cov-report=term-missing --cov-report=xml --cov-report=html --cov-fail-under=50"
pythonpath = ["src"]
testpaths = [
    "tests",
]
python_files = [
    "test_*.py",
    "*_test.py",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "performance: Performance tests",
    "slow: Slow tests (may take >1 second)",
    "requires_git: Tests that require git",
    "requires_network: Tests that require network access",
    "core: Core functionality tests (analyzer, generator, CLI, config)",
    "intelligence: Intelligence layer tests (agents, templates, detection)",
    "advanced: Advanced features tests (template ecosystem, config management, git)",
    "phase1: Phase 1 core functionality tests",
    "phase2: Phase 2 intelligence layer tests",
    "phase3: Phase 3 advanced feature tests",
    "asyncio: Async tests",
    "benchmark: Performance benchmark tests using pytest-benchmark",
    "failing: Known failing tests that run in non-blocking CI job",
]

[tool.coverage.run]
source = ["claude_builder"]
omit = [
    "tests/*",
    "claude_builder/templates/*",
    "*/__init__.py",
    "claude_builder/cli/main.py",
]
branch = true
data_file = ".coverage"
relative_files = true

[tool.coverage.paths]
source = [
    "src/claude_builder",
    "*/site-packages/claude_builder",
]

[tool.coverage.report]
show_missing = true
skip_covered = false
skip_empty = false
sort = "Cover"
exclude_lines = [
    "pragma: no cover",
    "pragma: nocover",
    "def __repr__",
    "def __str__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "raise ValueError\\(.*\\)",
    "if 0:",
    "if False:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "except ImportError:",
    "except ModuleNotFoundError:",
]

[tool.coverage.xml]
output = "coverage.xml"

[tool.coverage.html]
directory = "htmlcov"
title = "Claude Builder Coverage Report"

[tool.isort]
profile = "black"
line_length = 88
src_paths = ["src", "tests"]
known_first_party = ["claude_builder"]
force_single_line = false
atomic = true
include_trailing_comma = true
lines_after_imports = 2
lines_between_types = 1
multi_line_output = 3
use_parentheses = true
filter_files = true

[dependency-groups]
dev = [
    "black>=24.8.0",
    "coverage>=7.6.1",
    "mypy>=1.14.1",
    "pylint>=3.2.7",
    "pytest>=8.3.5",
    "pytest-asyncio>=0.24.0",
    "pytest-benchmark>=4.0.0",
    "pytest-cov>=5.0.0",
    "ruff>=0.12.9",
    "types-pyyaml>=6.0.12.20241230",
    "types-requests>=2.32.0.20241016",
    "types-toml>=0.10.8.20240310",
    "types-aiofiles>=23.2.0.20241106",
    "types-psutil>=6.1.0.20241221",
    "build>=1.2.2.post1",
]
