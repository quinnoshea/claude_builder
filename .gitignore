
*$py.class
.abstra/
# Abstra
# Abstra is an AI-powered process automation framework.
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  and can be added to the global gitignore or merged into this file. However, if you prefer,
bandit-report.json
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
build/
# Byte-compiled / optimized / DLL files
.cache
celerybeat.pid
celerybeat-schedule
# Celery stuff
# C extensions
.code/
#   commonly ignored for libraries.
*.cover
cover/
.coverage
.coverage.*
coverage.xml
cython_debug/
# Cython debug symbols
db.sqlite3
db.sqlite3-journal
develop-eggs/
dist/
# Distribution / packaging
# Django stuff:
.dmypy.json
dmypy.json
docs/_build/
downloads/
*.egg
*.egg-info/
.eggs/
eggs/
.env
env/
ENV/
env.bak/
# Environments
.envrc
*_failures_report.txt
# Flask stuff:
#   For a library or package, you might want to ignore these files since the code is
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
*-health-report.json
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
htmlcov/
#   https://pdm-project.org/en/latest/usage/project/#working-with-version-control
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
.hypothesis/
#.idea/
# Ignore directories containing user credentials, local state, and settings.
#   install all needed dependencies.
.installed.cfg
# Installer logs
instance/
#   intended to run in multiple environments; otherwise, check them in:
#   in the .venv directory. It is recommended not to include this directory in version control.
.ipynb_checkpoints
# IPython
ipython_config.py
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
junit.xml
# Jupyter Notebook
# Learn more at https://abstra.io/docs
lib/
lib64/
# Local agent worktrees and logs (not for version control)
local_settings.py
*.log
*.manifest
MANIFEST
__marimo__/
# Marimo
marimo/_lsp/
marimo/_static/
# mkdocs documentation
*.mo
# mypy
.mypy_cache/
nosetests.xml
.nox/
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
parts/
# pdm
.pdm-build/
#pdm.lock
.pdm-python
#   pdm recommends including project-wide configuration in pdm.toml, but excluding .pdm-python.
#pdm.toml
# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
pip-delete-this-directory.txt
# pipenv
#Pipfile.lock
pip-log.txt
# pixi
.pixi
#   Pixi creates a virtual environment in the .pixi directory, just like venv module creates one
#pixi.lock
# poetry
#poetry.lock
#poetry.toml
*.pot
profile_default/
.pybuilder/
# PyBuilder
__pycache__/
# PyCharm
*.py[codz]
*.py.cover
# pyenv
# PyInstaller
__pypackages__/
# PyPI configuration file
.pypirc
.pyre/
# Pyre type checker
.pytest_cache/
.Python
# .python-version
.pytype/
# pytype static type analyzer
.ropeproject
# Rope project settings
.ruff_cache/
# Ruff stuff:
safety-report.json
# SageMath parsed files
*.sage.py
.scrapy
# Scrapy stuff:
sdist/
# Security and analysis reports
share/python-wheels/
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#   Similar to Pipfile.lock, it is generally recommended to include pixi.lock in version control.
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   Similar to Pipfile.lock, it is generally recommended to include uv.lock in version control.
/site
*.so
*.spec
# Sphinx documentation
.spyderproject
# Spyder project settings
.spyproject
# Streamlit
.streamlit/secrets.toml
target/
# Test and development files
test_failures_report.txt
#  that can be found at https://github.com/github/gitignore/blob/main/Global/VisualStudioCode.gitignore
#   This is especially recommended for binary packages to ensure reproducibility, and is more
tmp/
.tox/
# Translations
# Unit test / coverage reports
#  Usually these files are written by a python script from a template
# UV
uv.lock
var/
.venv
venv/
venv.bak/
# Visual Studio Code
#  Visual Studio Code specific template is maintained in a separate VisualStudioCode.gitignore
.vscode/
.webassets-cache
wheels/
#  you could uncomment the following to ignore the entire vscode folder
